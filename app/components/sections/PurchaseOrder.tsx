"use client";

import React, { useState, useMemo, useEffect } from "react";
import { Button } from "../ui/button";
import { Input } from "../ui/input";
import { Eye } from "lucide-react";
import { Textarea } from "../ui/textarea";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "../ui/table";
import {
  Dialog,
  DialogContent,
  DialogFooter,
  DialogHeader,
  DialogPanel,
  DialogTitle,
  DialogTrigger,
} from "../ui/dialog";
import { Label } from "../ui/label";
import { Badge } from "../ui/badge";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "../ui/select";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "../ui/alert-dialog";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../ui/card";

import { Plus, Search, Edit, Trash2 } from "lucide-react";

import type {
  ItemType,
  WarehouseType,
  SupplierType,
  PurchaseOrderType,
} from "./type";

import { useRouter } from "next/navigation";
import { Checkbox } from "../ui/checkbox";
import { toast } from "sonner";
import { cn } from "../ui/utils";

type Props = {
  onSuccess?: () => void;
};

export default function PurchaseOrder({ onSuccess }: Props) {
  const [purchaseOrders, setPurchaseOrders] = useState<PurchaseOrderType[]>([]);
  const [searchTerm, setSearchTerm] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [rowsPerPage, setRowsPerPage] = useState(10);

  const [isCreateDialogOpen, setIsCreateDialogOpen] = useState(false);
  const [isEditDialogOpen, setIsEditDialogOpen] = useState(false);
  const [isViewDialogOpen, setIsViewDialogOpen] = useState(false);

  const [editingPO, setEditingPO] = useState<PurchaseOrderType | null>(null);
  const [viewingPO, setViewingPO] = useState<PurchaseOrderType | null>(null);

  const [selectedIds, setSelectedIds] = useState<string[]>([]);

  const [suppliers, setSuppliers] = useState<SupplierType[]>([]);
  const [warehouses, setWarehouses] = useState<WarehouseType[]>([]);
  const [items, setItems] = useState<ItemType[]>([]);
  const [itemsData, setItemsData] = useState([
    {
      itemCode: "",
      itemName: "",
      unitType: "",
      purchasePrice: 0,
      quantity: 1,
    },
  ]);

  useEffect(() => {
    console.log("Fetching suppliers...");

    fetch("/api/suppliers")
      .then((res) => res.json())
      .then((response) => {
        console.log("Raw response:", response);

        const data = Array.isArray(response?.items) ? response.items : [];

        console.log("Parsed suppliers:", data);
        setSuppliers(data); // ✅ Should match SupplierType[]
      })
      .catch((err) => console.error("Failed to fetch suppliers", err));
  }, []);

  useEffect(() => {
    console.log("Fetching warehouses...");

    fetch("/api/warehouses")
      .then((res) => res.json())
      .then((response) => {
        console.log("Raw response:", response);

        const data = Array.isArray(response?.warehouses)
          ? response.warehouses
          : [];
        console.log("Parsed warehouses:", data);

        setWarehouses(data);
      })
      .catch((err) => console.error("Failed to fetch warehouses", err));
  }, []);

  useEffect(() => {
    console.log("Fetching items...");

    fetch("/api/items")
      .then((res) => res.json())
      .then((response) => {
        console.log("Raw response:", response);

        const data = Array.isArray(response?.items) ? response.items : [];
        console.log("Parsed items:", data);

        setItems(data);
      })
      .catch((err) => console.error("Failed to fetch items", err));
  }, []);

  const router = useRouter();

  const [formData, setFormData] = useState<
    Omit<PurchaseOrderType, "_id" | "createdAt" | "updatedAt">
  >({
    poNumber: "", // auto-generated by backend
    referenceNumber: "",
    supplierName: "",
    warehouse: "",
    itemName: "",
    total: 0,
    balance: 0,
    remarks: "",
    status: "Pending",
  });

  const [validationErrors, setValidationErrors] = useState<
    Record<
      keyof Omit<PurchaseOrderType, "_id" | "createdAt" | "updatedAt">,
      string
    >
  >({
    poNumber: "",
    referenceNumber: "",
    supplierName: "", // ← added
    warehouse: "", // ← added
    itemName: "", // ← added
    total: "",
    balance: "",
    remarks: "",
    status: "",
  });
  // Filter and paginate data
  const filteredPurchaseOrders = useMemo(() => {
    const query = searchTerm.toLowerCase();

    return purchaseOrders.filter((po) => {
      const poNumber = po.poNumber?.toLowerCase() || "";
      const reference = po.referenceNumber?.toLowerCase() || "";
      const remarks = po.remarks?.toLowerCase() || "";

      return (
        poNumber.includes(query) ||
        reference.includes(query) ||
        remarks.includes(query)
      );
    });
  }, [purchaseOrders, searchTerm]);

  const totalPages = Math.ceil(filteredPurchaseOrders.length / rowsPerPage);

  const paginatedPurchaseOrders: PurchaseOrderType[] =
    filteredPurchaseOrders.slice(
      (currentPage - 1) * rowsPerPage,
      currentPage * rowsPerPage
    );
  // Reset to first page when search changes
  React.useEffect(() => {
    setCurrentPage(1);
  }, [searchTerm]);

  // Validation functions
  const validateForm = (isEdit = false) => {
    const errors: Record<
      keyof Omit<PurchaseOrderType, "_id" | "createdAt" | "updatedAt">,
      string
    > = {
      poNumber: "",
      referenceNumber: "",
      supplierName: "",
      warehouse: "",
      itemName: "",
      total: "",
      balance: "",
      remarks: "",
      status: "",
    };

    // Required: supplierName
    if (!formData.supplierName.trim()) {
      errors.supplierName = "Supplier Name is required";
    }

    // Required: warehouse
    if (!formData.warehouse.trim()) {
      errors.warehouse = "Warehouse is required";
    }

    // Required: itemName
    // if (!formData.itemName.trim()) {
    //   errors.itemName = "Item name is required";
    // }

    setValidationErrors(errors);
    return !Object.values(errors).some((error) => error !== "");
  };

  // Compute amount and balance directly before submission
  useEffect(() => {
    const total = itemsData.reduce((sum, item) => {
      const quantity = Number(item.quantity) || 0;
      const price = Number(item.purchasePrice) || 0;
      return sum + quantity * price;
    }, 0);

    setFormData((prev) => ({
      ...prev,
      total,
    }));
  }, [itemsData]);

  const formattedTotal = new Intl.NumberFormat("en-PH", {
    style: "currency",
    currency: "PHP",
  }).format(formData.total);

  const handleCreate = async () => {
    if (!validateForm()) return;

    const payload = {
      poNumber: formData.poNumber?.trim() || "",
      referenceNumber: formData.referenceNumber?.trim() || "",
      supplierName: formData.supplierName?.trim().toUpperCase() || "",
      warehouse: formData.warehouse?.trim().toUpperCase() || "",
      itemName: formData.itemName?.trim().toUpperCase() || "",
      total: Number(formData.total) || 0,
      balance: Number(formData.total) || 0,
      remarks: formData.remarks?.trim() || "",
      status: formData.status?.trim() || "Pending",
    };

    console.log("Creating purchase order:", payload);

    try {
      const res = await fetch("/api/purchase-orders", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(payload),
      });

      const result = await res.json();
      console.log("Server response:", result);

      if (!res.ok) {
        console.error("Create failed:", result.message || result);
        alert("Failed to create purchase order. Please try again.");
        return;
      }

      toast.success("Purchase order created successfully!");

      if (typeof onSuccess === "function") {
        onSuccess();
      }

      setTimeout(() => {
        router.push("/");
      }, 300);
    } catch (error) {
      console.error("Network or unexpected error:", error);
      alert("Something went wrong. Please check your connection or try again.");
    }

    setIsCreateDialogOpen(false);
  };

  const handleEdit = (po: PurchaseOrderType) => {
    setEditingPO(po);

    setFormData({
      poNumber: po.poNumber || "",
      referenceNumber: po.referenceNumber || "",
      supplierName: po.supplierName || "",
      warehouse: po.warehouse || "",
      itemName: po.itemName || "",
      total: po.total ?? 0,
      balance: po.balance ?? 0,
      remarks: po.remarks || "",
      status: po.status || "Pending",
    });

    setValidationErrors({
      poNumber: "",
      referenceNumber: "",
      supplierName: "",
      warehouse: "",
      itemName: "",
      total: "",
      balance: "",
      remarks: "",
      status: "",
    });
    setIsEditDialogOpen(true);
  };

  const handleUpdate = async () => {
    if (!editingPO || !validateForm(true)) {
      return;
    }

    try {
      const res = await fetch(`/api/purchase-orders/${editingPO._id}`, {
        method: "PUT",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          poNumber: formData.poNumber.trim(),
          referenceNumber: formData.referenceNumber?.trim(),
          supplierName: formData.supplierName.trim().toUpperCase(),
          warehouse: formData.warehouse.trim().toUpperCase(),
          itemName: formData.itemName.trim().toUpperCase(), // ← added
          total: Number(formData.total),
          balance: Number(formData.balance),
          remarks: formData.remarks?.trim(),
          status: formData.status.trim(),
        }),
      });

      if (!res.ok) {
        throw new Error("Failed to update purchase order");
      }

      const updatedPO = await res.json();

      // Update local state
      setPurchaseOrders((prev) =>
        prev.map((po) => (po._id === editingPO._id ? updatedPO : po))
      );
    } catch (err) {
      console.error("Update error:", err);
      return;
    }

    // Reset form and close dialog
    setEditingPO(null);
    setFormData({
      poNumber: "",
      referenceNumber: "",
      supplierName: "",
      warehouse: "",
      itemName: "",
      total: 0,
      balance: 0,
      remarks: "",
      status: "Pending",
    });
    setValidationErrors({
      poNumber: "",
      referenceNumber: "",
      supplierName: "",
      warehouse: "",
      itemName: "",
      total: "",
      balance: "",
      remarks: "",
      status: "",
    });
    setIsEditDialogOpen(false);
  };

  const handleDelete = async (poId: string) => {
    try {
      const res = await fetch(`/api/purchase-orders?id=${poId}`, {
        method: "DELETE",
      });

      if (!res.ok) {
        const error = await res.json();
        throw new Error(error?.error || "Failed to delete purchase order");
      }

      // Update local state after successful deletion
      setPurchaseOrders((prev) => prev.filter((po) => po._id !== poId));
      console.log("Deleted purchase order:", poId);
    } catch (error) {
      console.error("Error deleting purchase order:", error);
      toast(
        <div>
          <strong>Delete failed</strong>
        </div>
      );
    }
  };

  const handleView = (po: PurchaseOrderType) => {
    setViewingPO(po);
    setIsViewDialogOpen(true);
  };

  const formatDate = (date: Date | string) => {
    const parsed = typeof date === "string" ? new Date(date) : date;
    return isNaN(parsed.getTime())
      ? "Invalid date"
      : parsed.toLocaleDateString("en-PH", {
          year: "numeric",
          month: "short",
          day: "numeric",
        });
  };

  const resetForm = () => {
    setFormData({
      poNumber: "",
      referenceNumber: "",
      supplierName: "",
      warehouse: "",
      itemName: "",
      total: 0,
      balance: 0,
      remarks: "",
      status: "Pending",
    });

    setValidationErrors({
      poNumber: "",
      referenceNumber: "",
      supplierName: "",
      warehouse: "",
      itemName: "",
      total: "",
      balance: "",
      remarks: "",
      status: "",
    });
  };

  const allSelected =
    paginatedPurchaseOrders.length > 0 &&
    selectedIds.length === paginatedPurchaseOrders.length;

  const toggleSelectAll = (checked: boolean | "indeterminate") => {
    if (checked === true) {
      // Select all purchase orders on current page
      const newSelections = [
        ...selectedIds,
        ...paginatedPurchaseOrders
          .filter((po) => !selectedIds.includes(po._id))
          .map((po) => po._id),
      ];
      setSelectedIds(newSelections);
    } else if (checked === false) {
      // Unselect all purchase orders on current page
      const remaining = selectedIds.filter(
        (id) => !paginatedPurchaseOrders.some((po) => po._id === id)
      );
      setSelectedIds(remaining);
    }
  };

  const toggleSelectOne = (id: string) => {
    setSelectedIds((prev) =>
      prev.includes(id) ? prev.filter((x) => x !== id) : [...prev, id]
    );
  };

  const handleDeleteMany = async (_ids: string[]) => {
    try {
      // Optimistically remove from UI
      setPurchaseOrders((prev) => prev.filter((po) => !_ids.includes(po._id)));

      const results = await Promise.all(
        _ids.map(async (_id) => {
          const res = await fetch(`/api/purchase-orders?id=${_id}`, {
            method: "DELETE",
          });

          if (!res.ok) {
            const error = await res.json();
            console.warn(`Failed to delete ${_id}:`, error.message);
          }

          return res;
        })
      );

      const failures = results.filter((res) => !res.ok);
      if (failures.length > 0) {
        alert(
          `Some purchase orders could not be deleted (${failures.length} failed).`
        );
      } else {
        toast(
          <div>
            <strong>Success</strong>
            <p>Selected purchase orders deleted.</p>
          </div>
        );
      }

      setSelectedIds([]);
      onSuccess?.(); // refresh list
    } catch (err) {
      console.error("Bulk delete failed:", err);
      alert("Failed to delete selected purchase orders.");
    }
  };

  const fetchPurchaseOrders = async () => {
    try {
      const res = await fetch("/api/purchase-orders", {
        cache: "no-store",
      });

      if (!res.ok) throw new Error("Failed to fetch purchase orders");

      const data = await res.json();
      const purchaseOrders = Array.isArray(data) ? data : data.items;

      setPurchaseOrders(Array.isArray(purchaseOrders) ? purchaseOrders : []);
    } catch (error) {
      console.error("Error loading purchase orders:", error);
      setPurchaseOrders([]);
    }
  };

  useEffect(() => {
    fetchPurchaseOrders(); // initial fetch

    const interval = setInterval(() => {
      fetchPurchaseOrders();
    }, 1000); // 1 second polling

    return () => clearInterval(interval); // cleanup on unmount
  }, []);

  // useEffect(() => {
  //   const computedAmount = formData.quantity * formData.purchasePrice;
  //   setFormData((prev) => ({
  //     ...prev,
  //     amount: computedAmount,
  //     balance: computedAmount, // optional: sync balance too
  //   }));
  // }, [formData.quantity, formData.purchasePrice]);

  const selectedItem = items.find(
    (item) => item.itemName?.toUpperCase().trim() === formData.itemName
  );

  const handleAddItem = () => {
    setItemsData((prev) => [
      ...prev,
      {
        itemCode: "",
        itemName: "",
        description: "",
        unitType: "",
        purchasePrice: 0,
        quantity: 1,
      },
    ]);
  };

  const handleRemoveItem = (index: number) => {
    setItemsData((prev) => prev.filter((_, i) => i !== index));
  };

  return (
    <div className="space-y-6">
      <Card>
        <CardHeader>
          <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4">
            <div>
              <CardTitle>Purchase Order</CardTitle>
              <CardDescription>Manage purchase orders</CardDescription>
            </div>
          </div>
        </CardHeader>

        <CardContent className="space-y-4">
          {/* Search and Add Button */}
          <div className="flex justify-between items-center gap-4">
            <div className="relative flex-1 max-w-sm">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4" />
              <Input
                placeholder="Search purchase orders types..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="pl-10"
              />
            </div>

            <Dialog
              open={isCreateDialogOpen}
              onOpenChange={(open) => {
                if (open) {
                  resetForm();
                }
                setIsCreateDialogOpen(open);
              }}>
              <DialogTrigger asChild>
                <Button className="gap-2">
                  <Plus className="w-4 h-4" />
                  Create Purchase Order
                </Button>
              </DialogTrigger>

              <DialogPanel className="space-y-6">
                {/* Header */}
                <DialogHeader className="border-b pb-4">
                  <DialogTitle className="text-xl font-semibold tracking-tight">
                    Create Purchase Order
                  </DialogTitle>
                </DialogHeader>

                {/* Form Content Slot (optional placeholder) */}
                <div className="space-y-4">
                  <div className="grid gap-4 py-4">
                    <div className="flex flex-row flex-wrap gap-4">
                      {/* PO Number */}
                      <div className="flex flex-col flex-1 min-w-[200px]">
                        <Label htmlFor="create-po-number">PO Number</Label>
                        <Input
                          id="create-po-number"
                          value={formData.poNumber}
                          readOnly
                          disabled
                          placeholder="Auto-generated"
                          className="text-sm uppercase bg-muted cursor-not-allowed"
                        />
                      </div>

                      {/* Requested Date */}
                      <div className="flex flex-col flex-1 min-w-[200px]">
                        <Label htmlFor="requested-date">Requested Date</Label>
                        <Input
                          id="requested-date"
                          value={new Date().toLocaleDateString("en-PH", {
                            year: "numeric",
                            month: "long",
                            day: "numeric",
                          })}
                          readOnly
                          disabled
                          className="text-sm bg-muted cursor-not-allowed"
                        />
                      </div>

                      {/* Reference Number */}
                      <div className="flex flex-col flex-[2] min-w-[300px]">
                        <Label htmlFor="create-reference-number">
                          Reference Number
                        </Label>
                        <Input
                          id="create-reference-number"
                          value={formData.referenceNumber}
                          onChange={(e) => {
                            const value = e.target.value.toUpperCase();
                            setFormData((prev) => ({
                              ...prev,
                              referenceNumber: value,
                            }));
                            setValidationErrors((prev) => ({
                              ...prev,
                              referenceNumber: "",
                            }));
                          }}
                          placeholder="e.g. REF-2025-001"
                          className={`text-sm uppercase ${
                            validationErrors.referenceNumber
                              ? "border-destructive"
                              : ""
                          }`}
                        />
                        {validationErrors.referenceNumber && (
                          <p className="text-sm text-destructive">
                            {validationErrors.referenceNumber}
                          </p>
                        )}
                      </div>
                    </div>

                    <div className="flex flex-row flex-wrap gap-4">
                      {/* Supplier Name */}
                      <div className="flex flex-col flex-1 min-w-[200px]">
                        <Label htmlFor="create-supplier-name">
                          Supplier Name
                        </Label>
                        <Select
                          value={formData.supplierName}
                          onValueChange={(value) => {
                            const normalized = value.toUpperCase().trim();
                            setFormData((prev) => ({
                              ...prev,
                              supplierName: normalized,
                            }));
                            setValidationErrors((prev) => ({
                              ...prev,
                              supplierName: "",
                            }));
                          }}>
                          <SelectTrigger
                            className={`text-sm uppercase w-full ${
                              validationErrors.supplierName
                                ? "border-destructive"
                                : ""
                            }`}>
                            {formData.supplierName || "Select Supplier"}
                          </SelectTrigger>
                          <SelectContent>
                            {Array.isArray(suppliers) &&
                            suppliers.length > 0 ? (
                              suppliers.map((supplier) => {
                                const label =
                                  supplier.supplierName?.trim() ||
                                  "Unnamed Supplier";
                                const value = label.toUpperCase();
                                return (
                                  <SelectItem
                                    key={supplier._id || value}
                                    value={value}>
                                    {label}
                                  </SelectItem>
                                );
                              })
                            ) : (
                              <SelectItem disabled value="no-suppliers">
                                No suppliers available
                              </SelectItem>
                            )}
                          </SelectContent>
                        </Select>
                        {validationErrors.supplierName && (
                          <p className="text-sm text-destructive">
                            {validationErrors.supplierName}
                          </p>
                        )}
                      </div>

                      {/* Warehouse */}
                      <div className="flex flex-col flex-1 min-w-[200px]">
                        <Label htmlFor="create-warehouse">Warehouse</Label>
                        <Select
                          value={formData.warehouse}
                          onValueChange={(value) => {
                            const normalized = value.toUpperCase().trim();
                            setFormData((prev) => ({
                              ...prev,
                              warehouse: normalized,
                            }));
                            setValidationErrors((prev) => ({
                              ...prev,
                              warehouse: "",
                            }));
                          }}>
                          <SelectTrigger
                            className={`text-sm uppercase w-full ${
                              validationErrors.warehouse
                                ? "border-destructive"
                                : ""
                            }`}>
                            {formData.warehouse || "Select Warehouse"}
                          </SelectTrigger>
                          <SelectContent>
                            {Array.isArray(warehouses) &&
                            warehouses.length > 0 ? (
                              warehouses.map((warehouse) => {
                                const label =
                                  warehouse.warehouse_name?.trim() ||
                                  "Unnamed Warehouse";
                                return (
                                  <SelectItem
                                    key={warehouse._id || label}
                                    value={label.toUpperCase()}>
                                    {label}
                                  </SelectItem>
                                );
                              })
                            ) : (
                              <SelectItem disabled value="no-warehouses">
                                No warehouses available
                              </SelectItem>
                            )}
                          </SelectContent>
                        </Select>
                        {validationErrors.warehouse && (
                          <p className="text-sm text-destructive">
                            {validationErrors.warehouse}
                          </p>
                        )}
                      </div>

                      {/* Remarks */}
                      <div className="flex flex-col flex-[2] min-w-[300px]">
                        <Label htmlFor="create-remarks">Remarks</Label>
                        <Textarea
                          id="create-remarks"
                          value={formData.remarks}
                          onChange={(e) => {
                            const value = e.target.value;
                            setFormData((prev) => ({
                              ...prev,
                              remarks: value,
                            }));
                            setValidationErrors((prev) => ({
                              ...prev,
                              remarks: "",
                            }));
                          }}
                          placeholder="Add any additional notes or comments here"
                          className={`text-sm ${
                            validationErrors.remarks ? "border-destructive" : ""
                          }`}
                        />
                        {validationErrors.remarks && (
                          <p className="text-sm text-destructive">
                            {validationErrors.remarks}
                          </p>
                        )}
                      </div>
                    </div>
                  </div>
                </div>
                {itemsData.map((item, index) => (
                  <div
                    key={index}
                    className="flex flex-row flex-wrap items-start gap-4 border-b pb-4 mb-4">
                    {/* Item Name */}
                    <div className="flex flex-col flex-1 min-w-[180px]">
                      <Label htmlFor={`item-name-${index}`}>Item Name</Label>
                      <Select
                        value={item.itemName}
                        onValueChange={(value) => {
                          const normalized = value.toUpperCase().trim();
                          const selected = items.find(
                            (option) =>
                              option.itemName?.toUpperCase().trim() ===
                              normalized
                          );

                          if (!selected) return;

                          setItemsData((prev) => {
                            const updated = [...prev];
                            updated[index] = {
                              ...updated[index],
                              itemName: normalized,
                              itemCode: selected.itemCode || "",
                              unitType: selected.unitType || "",
                              purchasePrice: selected.purchasePrice || 0,
                            };
                            return updated;
                          });
                        }}>
                        <SelectTrigger
                          id={`item-name-${index}`}
                          className="text-sm uppercase w-full">
                          {item.itemName || "Select Item"}
                        </SelectTrigger>
                        <SelectContent>
                          {items.length > 0 ? (
                            items.map((option) => {
                              const label =
                                option.itemName?.trim() || "Unnamed Item";
                              return (
                                <SelectItem
                                  key={option._id || label}
                                  value={label.toUpperCase()}>
                                  {label}
                                </SelectItem>
                              );
                            })
                          ) : (
                            <SelectItem disabled value="no-items">
                              No items available
                            </SelectItem>
                          )}
                        </SelectContent>
                      </Select>
                    </div>

                    {/* Item Code */}
                    <div className="flex flex-col flex-1 min-w-[180px]">
                      <Label htmlFor={`item-code-${index}`}>Item Code</Label>
                      <input
                        type="text"
                        id={`item-code-${index}`}
                        value={item.itemCode || ""}
                        readOnly
                        className="text-sm w-full bg-muted px-3 py-2 rounded border border-input"
                      />
                    </div>

                    {/* Unit of Measure */}
                    <div className="flex flex-col flex-1 min-w-[180px]">
                      <Label htmlFor={`item-unit-type-${index}`}>
                        Unit of Measure
                      </Label>
                      <input
                        type="text"
                        id={`item-unit-type-${index}`}
                        value={item.unitType || ""}
                        readOnly
                        className="text-sm w-full bg-muted px-3 py-2 rounded border border-input"
                      />
                    </div>

                    {/* Purchase Price */}
                    <div className="flex flex-col flex-1 min-w-[180px]">
                      <Label htmlFor={`item-purchasePrice-${index}`}>
                        Purchase Price
                      </Label>
                      <input
                        type="text"
                        id={`item-purchasePrice-${index}`}
                        value={
                          item.purchasePrice !== undefined
                            ? item.purchasePrice.toLocaleString("en-PH", {
                                style: "currency",
                                currency: "PHP",
                              })
                            : ""
                        }
                        readOnly
                        className="text-sm w-full bg-muted px-3 py-2 rounded border border-input"
                      />
                    </div>

                    {/* Quantity */}
                    <div className="flex flex-col flex-1 min-w-[180px]">
                      <Label htmlFor={`item-quantity-${index}`}>Quantity</Label>
                      <input
                        type="number"
                        id={`item-quantity-${index}`}
                        min={1}
                        value={item.quantity}
                        onChange={(e) => {
                          const value = Number(e.target.value);
                          setItemsData((prev) => {
                            const updated = [...prev];
                            updated[index].quantity = value;
                            return updated;
                          });
                        }}
                        className="text-sm w-full px-3 py-2 rounded border border-input"
                      />
                    </div>

                    {/* Amount */}
                    <div className="flex flex-col flex-1 min-w-[180px]">
                      <Label htmlFor={`item-amount-${index}`}>Amount</Label>
                      <input
                        type="text"
                        id={`item-amount-${index}`}
                        value={
                          item.purchasePrice && item.quantity
                            ? (
                                item.purchasePrice * item.quantity
                              ).toLocaleString("en-PH", {
                                style: "currency",
                                currency: "PHP",
                              })
                            : ""
                        }
                        readOnly
                        className="text-sm w-full bg-muted px-3 py-2 rounded border border-input"
                      />
                    </div>

                    {/* Trash Button */}
                    <div className="flex flex-col justify-center min-w-[40px] pt-[1rem]">
                      <Button
                        variant="destructive"
                        size="icon"
                        className="p-4 w-6 h-6 flex items-center justify-center"
                        onClick={() => handleRemoveItem(index)}
                        title="Remove item">
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                ))}
                <div className="flex w-full justify-end mt-4">
                  <div className="flex flex-col min-w-[180px]">
                    <Label htmlFor="total-amount">Total</Label>
                    <input
                      type="text"
                      id="total-amount"
                      value={formattedTotal}
                      readOnly
                      disabled
                      className="text-sm font-semibold w-full bg-muted px-3 py-2 rounded border border-input cursor-not-allowed"
                    />
                  </div>
                </div>

                {/* Footer Actions */}
                <DialogFooter className="pt-4 border-t">
                  <div className="flex w-full justify-between items-center">
                    {/* Left: Add Item */}
                    <Button onClick={handleAddItem}>Add Item</Button>

                    {/* Right: Cancel & Create */}
                    <div className="flex gap-2">
                      <Button
                        variant="ghost"
                        onClick={() => {
                          setIsCreateDialogOpen(false);
                          resetForm();
                        }}>
                        Cancel
                      </Button>
                      <Button onClick={handleCreate}>Create</Button>
                    </div>
                  </div>
                </DialogFooter>
              </DialogPanel>
            </Dialog>
          </div>

          {selectedIds.length > 0 && (
            <div className="flex items-center justify-between mb-4">
              <span className="text-sm text-gray-600">
                ✅ {selectedIds.length} purchase order(s) selected
              </span>
              <div className="flex gap-2">
                <Button
                  variant="destructive"
                  onClick={() => handleDeleteMany(selectedIds)}>
                  Delete Selected
                </Button>
                <Button variant="outline" onClick={() => setSelectedIds([])}>
                  Clear Selection
                </Button>
              </div>
            </div>
          )}

          {/* Table */}
          <div className="border rounded-lg">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>
                    <Checkbox
                      checked={allSelected}
                      onCheckedChange={toggleSelectAll}
                      aria-label="Select all purchase orders on current page"
                    />
                  </TableHead>
                  <TableHead>Creation Date</TableHead>
                  <TableHead>PO Number</TableHead>
                  <TableHead>Reference Number</TableHead>
                  <TableHead>Supplier</TableHead>
                  <TableHead>Warehouse</TableHead>
                  <TableHead>Total</TableHead>
                  <TableHead>Remarks</TableHead>
                  <TableHead>Status</TableHead>
                  <TableHead className="w-32">Actions</TableHead>
                </TableRow>
              </TableHeader>

              <TableBody>
                {paginatedPurchaseOrders.length === 0 ? (
                  <TableRow>
                    <TableCell
                      colSpan={10}
                      className="text-center py-8 text-muted-foreground">
                      No purchase orders found
                    </TableCell>
                  </TableRow>
                ) : (
                  paginatedPurchaseOrders.map((po) => (
                    <TableRow key={po._id || po.poNumber}>
                      <TableCell>
                        <Checkbox
                          checked={selectedIds.includes(po._id)}
                          onCheckedChange={() => toggleSelectOne(po._id)}
                        />
                      </TableCell>
                      <TableCell>
                        {po.createdAt ? formatDate(po.createdAt) : "—"}
                      </TableCell>
                      <TableCell>{po.poNumber}</TableCell>
                      <TableCell>{po.referenceNumber || "—"}</TableCell>
                      <TableCell>{po.supplierName || "—"}</TableCell>
                      <TableCell>{po.warehouse || "—"}</TableCell>
                      <TableCell>{po.total || "—"}</TableCell>
                      <TableCell>{po.remarks || "—"}</TableCell>
                      <TableCell>{po.status}</TableCell>
                      <TableCell>
                        <div className="flex gap-1">
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleView(po)}
                            title="View Details">
                            <Eye className="w-4 h-4" />
                          </Button>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => handleEdit(po)}
                            title="Edit Purchase Order">
                            <Edit className="w-4 h-4" />
                          </Button>
                          <AlertDialog>
                            <AlertDialogTrigger asChild>
                              <Button
                                variant="ghost"
                                size="sm"
                                title="Delete Purchase Order"
                                className="text-red-600 hover:text-red-700">
                                <Trash2 className="w-4 h-4" />
                              </Button>
                            </AlertDialogTrigger>
                            <AlertDialogContent>
                              <AlertDialogHeader>
                                <AlertDialogTitle>
                                  Delete Purchase Order
                                </AlertDialogTitle>
                                <AlertDialogDescription>
                                  Are you sure you want to delete PO &quot;
                                  {po.poNumber}&quot;? This action cannot be
                                  undone.
                                </AlertDialogDescription>
                              </AlertDialogHeader>
                              <AlertDialogFooter>
                                <AlertDialogCancel>Cancel</AlertDialogCancel>
                                <AlertDialogAction
                                  onClick={() => handleDelete(po._id)}>
                                  Delete
                                </AlertDialogAction>
                              </AlertDialogFooter>
                            </AlertDialogContent>
                          </AlertDialog>
                        </div>
                      </TableCell>
                    </TableRow>
                  ))
                )}
              </TableBody>
            </Table>
          </div>

          {/* Results count */}
          <div className="flex items-center justify-between mt-4">
            {/* Rows per page selector */}
            <div className="flex items-center gap-2">
              <span className="text-sm text-gray-600">
                Purchase orders per page:
              </span>
              <Select
                value={String(rowsPerPage)}
                onValueChange={(val) => {
                  setRowsPerPage(Number(val));
                  setCurrentPage(1); // reset to first page
                }}>
                <SelectTrigger className="w-20">
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="10">10</SelectItem>
                  <SelectItem value="50">50</SelectItem>
                  <SelectItem value="100">100</SelectItem>
                </SelectContent>
              </Select>
            </div>

            {/* Pagination controls */}
            <div className="flex items-center gap-2">
              <Button
                variant="ghost"
                size="sm"
                disabled={currentPage === 1}
                onClick={() => setCurrentPage((prev) => prev - 1)}>
                Previous
              </Button>
              <span className="text-sm text-gray-600">
                Page {currentPage} of {totalPages}
              </span>
              <Button
                variant="ghost"
                size="sm"
                disabled={currentPage === totalPages || totalPages === 0}
                onClick={() => setCurrentPage((prev) => prev + 1)}>
                Next
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Edit Dialog */}
      <Dialog open={isEditDialogOpen} onOpenChange={setIsEditDialogOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle>Edit Purchase Orders</DialogTitle>
          </DialogHeader>

          <div className="grid gap-4 py-4">
            <Card className="p-4">
              <div className="grid grid-cols-2 gap-4">
                <div className="grid gap-2">
                  <Label htmlFor="edit-supplier-name">Supplier Name</Label>
                  <Select
                    value={formData.supplierName}
                    onValueChange={(value) => {
                      const normalized = value.toUpperCase().trim();
                      setFormData((prev) => ({
                        ...prev,
                        supplierName: normalized,
                      }));
                      setValidationErrors((prev) => ({
                        ...prev,
                        supplierName: "",
                      }));
                    }}>
                    <SelectTrigger
                      className={`text-sm uppercase w-full ${
                        validationErrors.supplierName
                          ? "border-destructive"
                          : ""
                      }`}>
                      {formData.supplierName || "Select Supplier"}
                    </SelectTrigger>

                    <SelectContent>
                      {Array.isArray(suppliers) &&
                        suppliers.map((supplier) => {
                          const label =
                            supplier.supplierName || "Unnamed Supplier";
                          return (
                            <SelectItem
                              key={supplier._id}
                              value={label.toUpperCase()}>
                              {label}
                            </SelectItem>
                          );
                        })}
                    </SelectContent>
                  </Select>

                  {validationErrors.supplierName && (
                    <p className="text-sm text-destructive">
                      {validationErrors.supplierName}
                    </p>
                  )}
                </div>

                <div className="grid gap-2 col-span-2">
                  <Label htmlFor="edit-reference-number">
                    Reference Number
                  </Label>
                  <Input
                    id="edit-reference-number"
                    value={formData.referenceNumber}
                    onChange={(e) => {
                      const value = e.target.value.toUpperCase();
                      setFormData((prev) => ({
                        ...prev,
                        referenceNumber: value,
                      }));
                      setValidationErrors((prev) => ({
                        ...prev,
                        referenceNumber: "",
                      }));
                    }}
                    placeholder="e.g. REF-2025-001"
                    className={`text-sm uppercase ${
                      validationErrors.referenceNumber
                        ? "border-destructive"
                        : ""
                    }`}
                  />
                  {validationErrors.referenceNumber && (
                    <p className="text-sm text-destructive">
                      {validationErrors.referenceNumber}
                    </p>
                  )}
                </div>

                <div className="grid gap-2">
                  <Label htmlFor="edit-warehouse">Warehouse</Label>
                  <Select
                    value={formData.warehouse}
                    onValueChange={(value) => {
                      const normalized = value.toUpperCase().trim();
                      setFormData((prev) => ({
                        ...prev,
                        warehouse: normalized,
                      }));
                      setValidationErrors((prev) => ({
                        ...prev,
                        warehouse: "",
                      }));
                    }}>
                    <SelectTrigger
                      className={`text-sm uppercase w-full ${
                        validationErrors.warehouse ? "border-destructive" : ""
                      }`}>
                      {formData.warehouse || "Select Warehouse"}
                    </SelectTrigger>

                    <SelectContent>
                      {Array.isArray(warehouses) &&
                        warehouses.map((warehouse) => {
                          const label =
                            warehouse.warehouse_name || "Unnamed Warehouse";
                          return (
                            <SelectItem
                              key={warehouse._id}
                              value={label.toUpperCase()}>
                              {label}
                            </SelectItem>
                          );
                        })}
                    </SelectContent>
                  </Select>

                  {validationErrors.warehouse && (
                    <p className="text-sm text-destructive">
                      {validationErrors.warehouse}
                    </p>
                  )}
                </div>
              </div>
            </Card>
          </div>
          <div className="flex justify-end gap-2">
            <Button
              variant="outline"
              onClick={() => {
                setIsEditDialogOpen(false);
                setEditingPO(null);
                resetForm();
              }}>
              Cancel
            </Button>
            <Button
              onClick={handleUpdate}
              // disabled={
              //   !formData.customerCode.trim() ||
              //   !formData.customerName.trim() ||
              //   Object.values(validationErrors).some((error) => error !== "")
              // }>
            >
              Update
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* View Dialog */}
      <Dialog open={isViewDialogOpen} onOpenChange={setIsViewDialogOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto rounded-xl p-6 scrollbar-thin scrollbar-thumb-muted-foreground scrollbar-track-transparent">
          <DialogHeader>
            <DialogTitle>PO Details</DialogTitle>
          </DialogHeader>
          {viewingPO && (
            <div className="grid gap-6 py-4">
              <Card className="p-4">
                <h4 className="text-m font-bold text-muted-foreground mt-1 text-center">
                  Purchase Order Info
                </h4>
                <div className="grid grid-cols-2 gap-4 mt-2">
                  {/* PO Number */}
                  {viewingPO.poNumber && (
                    <div className="flex flex-col gap-1">
                      <Label className="text-xs text-muted-foreground">
                        PO Number
                      </Label>
                      <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                        {viewingPO.poNumber}
                      </div>
                    </div>
                  )}

                  {/* Reference Number */}
                  {viewingPO.referenceNumber && (
                    <div className="flex flex-col gap-1">
                      <Label className="text-xs text-muted-foreground">
                        Reference Number
                      </Label>
                      <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                        {viewingPO.referenceNumber}
                      </div>
                    </div>
                  )}

                  {/* Supplier Name */}
                  {viewingPO.supplierName && (
                    <div className="flex flex-col gap-1">
                      <Label className="text-xs text-muted-foreground">
                        Supplier
                      </Label>
                      <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                        {viewingPO.supplierName}
                      </div>
                    </div>
                  )}

                  {/* Warehouse */}
                  {viewingPO.warehouse && (
                    <div className="flex flex-col gap-1">
                      <Label className="text-xs text-muted-foreground">
                        Warehouse
                      </Label>
                      <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                        {viewingPO.warehouse}
                      </div>
                    </div>
                  )}

                  {/* Amount */}
                  <div className="flex flex-col gap-1">
                    <Label className="text-xs text-muted-foreground">
                      Total Amount
                    </Label>
                    <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                      ₱{viewingPO.total.toLocaleString()}
                    </div>
                  </div>

                  {/* Balance */}
                  <div className="flex flex-col gap-1">
                    <Label className="text-xs text-muted-foreground">
                      Balance
                    </Label>
                    <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                      ₱{viewingPO.balance.toLocaleString()}
                    </div>
                  </div>

                  {/* Status */}
                  <div className="flex flex-col gap-1">
                    <Label className="text-xs text-muted-foreground">
                      Status
                    </Label>
                    <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                      {viewingPO.status}
                    </div>
                  </div>

                  {/* Remarks */}
                  {viewingPO.remarks && (
                    <div className="flex flex-col gap-1 col-span-2">
                      <Label className="text-xs text-muted-foreground">
                        Remarks
                      </Label>
                      <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                        {viewingPO.remarks}
                      </div>
                    </div>
                  )}

                  {/* Created At */}
                  <div className="flex flex-col gap-1">
                    <Label className="text-xs text-muted-foreground">
                      Created At
                    </Label>
                    <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                      {formatDate(viewingPO.createdAt)}
                    </div>
                  </div>

                  {/* Updated At */}
                  <div className="flex flex-col gap-1">
                    <Label className="text-xs text-muted-foreground">
                      Updated At
                    </Label>
                    <div className="bg-muted rounded-md px-3 py-2 text-sm border">
                      {formatDate(viewingPO.updatedAt)}
                    </div>
                  </div>
                </div>
              </Card>
            </div>
          )}
          <div className="flex justify-end">
            <Button
              variant="outline"
              onClick={() => setIsViewDialogOpen(false)}>
              Close
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    </div>
  );
}
